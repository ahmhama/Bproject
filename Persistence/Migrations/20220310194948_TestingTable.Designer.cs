// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220310194948_TestingTable")]
    partial class TestingTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.2");

            modelBuilder.Entity("Domain.Checking", b =>
                {
                    b.Property<int>("ChildId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiseasesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("doctorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CheckResultDescription")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Height")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Weight")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("date")
                        .HasColumnType("TEXT");

                    b.HasKey("ChildId", "DiseasesId", "doctorId");

                    b.HasIndex("DiseasesId");

                    b.HasIndex("doctorId");

                    b.ToTable("Checkings");
                });

            modelBuilder.Entity("Domain.Child", b =>
                {
                    b.Property<int>("ChildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChildAddress")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ChildBirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ChildFirstName")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ChildGender")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ChildLastName")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("ChildMiniName")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("RelativeId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("relativesRelativeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChildId");

                    b.HasIndex("relativesRelativeId");

                    b.ToTable("Child");
                });

            modelBuilder.Entity("Domain.Diseases", b =>
                {
                    b.Property<int>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("sideEffect")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("vaccineName")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("DiseaseId");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("Domain.Doctor", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("HealthOfficeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("address")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("firstName")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("gender")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("number")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("specilization")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("DoctorId");

                    b.HasIndex("HealthOfficeId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("Domain.Event", b =>
                {
                    b.Property<int>("ChildId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VaccineCampingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("doctorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("ChildId", "VaccineCampingId", "doctorId");

                    b.HasIndex("VaccineCampingId");

                    b.HasIndex("doctorId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Domain.HealthOffice", b =>
                {
                    b.Property<int>("HealthOfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinisrtAdminId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("address")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("number")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("HealthOfficeId");

                    b.HasIndex("MinisrtAdminId");

                    b.ToTable("HealthOffices");
                });

            modelBuilder.Entity("Domain.MinistryAdministrator", b =>
                {
                    b.Property<int>("adminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("firstName")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("gender")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("number")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("adminId");

                    b.ToTable("MinistryAdministrator");
                });

            modelBuilder.Entity("Domain.Relatives", b =>
                {
                    b.Property<int>("RelativeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("address")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("email")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("firstName")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("gender")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("lastName")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("number")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("RelativeId");

                    b.ToTable("Relatives");
                });

            modelBuilder.Entity("Domain.Testing", b =>
                {
                    b.Property<Guid>("TestingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("TestingName")
                        .HasColumnType("TEXT");

                    b.Property<int>("TestingNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("TestingId");

                    b.ToTable("Testing");
                });

            modelBuilder.Entity("Domain.Vaccine", b =>
                {
                    b.Property<int>("VaccineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("DoseRoute")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("VaccineAge")
                        .HasMaxLength(30)
                        .HasColumnType("TEXT");

                    b.Property<string>("VaccineName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("diseasesName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("VaccineId");

                    b.ToTable("Vaccine");
                });

            modelBuilder.Entity("Domain.VaccineCamping", b =>
                {
                    b.Property<int>("VaccineCampingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int?>("MinistryAdministratorsadminId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("TEXT");

                    b.Property<string>("VaccineCampingDescription")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("VaccineCampingName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("adminId")
                        .HasColumnType("INTEGER");

                    b.HasKey("VaccineCampingId");

                    b.HasIndex("MinistryAdministratorsadminId");

                    b.ToTable("VaccineCamping");
                });

            modelBuilder.Entity("Domain.VaccineTransaction", b =>
                {
                    b.Property<int>("ChildId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VaccineId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("doctorId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.HasKey("ChildId", "VaccineId", "doctorId");

                    b.HasIndex("VaccineId");

                    b.HasIndex("doctorId");

                    b.ToTable("VaccineTranasaction");
                });

            modelBuilder.Entity("Domain.Checking", b =>
                {
                    b.HasOne("Domain.Child", "Child")
                        .WithMany("Checking")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Diseases", "diseases")
                        .WithMany("Checking")
                        .HasForeignKey("DiseasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Doctor", "doctor")
                        .WithMany("Checking")
                        .HasForeignKey("doctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("diseases");

                    b.Navigation("doctor");
                });

            modelBuilder.Entity("Domain.Child", b =>
                {
                    b.HasOne("Domain.Relatives", "relatives")
                        .WithMany("Children")
                        .HasForeignKey("relativesRelativeId");

                    b.Navigation("relatives");
                });

            modelBuilder.Entity("Domain.Doctor", b =>
                {
                    b.HasOne("Domain.HealthOffice", "HealthOffices")
                        .WithMany("doctors")
                        .HasForeignKey("HealthOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthOffices");
                });

            modelBuilder.Entity("Domain.Event", b =>
                {
                    b.HasOne("Domain.Child", "Child")
                        .WithMany("Events")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.VaccineCamping", "VaccineCamping")
                        .WithMany("Events")
                        .HasForeignKey("VaccineCampingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Doctor", "doctor")
                        .WithMany("Events")
                        .HasForeignKey("doctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("VaccineCamping");

                    b.Navigation("doctor");
                });

            modelBuilder.Entity("Domain.HealthOffice", b =>
                {
                    b.HasOne("Domain.MinistryAdministrator", "MinistryAdministrator")
                        .WithMany("HealthOffices")
                        .HasForeignKey("MinisrtAdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MinistryAdministrator");
                });

            modelBuilder.Entity("Domain.VaccineCamping", b =>
                {
                    b.HasOne("Domain.MinistryAdministrator", "MinistryAdministrators")
                        .WithMany("VaccineCamping")
                        .HasForeignKey("MinistryAdministratorsadminId");

                    b.Navigation("MinistryAdministrators");
                });

            modelBuilder.Entity("Domain.VaccineTransaction", b =>
                {
                    b.HasOne("Domain.Child", "Child")
                        .WithMany("VaccineTransactions")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Vaccine", "Vaccine")
                        .WithMany("VaccineTranasaction")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Doctor", "Doctor")
                        .WithMany("VaccineTransaction")
                        .HasForeignKey("doctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Doctor");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Domain.Child", b =>
                {
                    b.Navigation("Checking");

                    b.Navigation("Events");

                    b.Navigation("VaccineTransactions");
                });

            modelBuilder.Entity("Domain.Diseases", b =>
                {
                    b.Navigation("Checking");
                });

            modelBuilder.Entity("Domain.Doctor", b =>
                {
                    b.Navigation("Checking");

                    b.Navigation("Events");

                    b.Navigation("VaccineTransaction");
                });

            modelBuilder.Entity("Domain.HealthOffice", b =>
                {
                    b.Navigation("doctors");
                });

            modelBuilder.Entity("Domain.MinistryAdministrator", b =>
                {
                    b.Navigation("HealthOffices");

                    b.Navigation("VaccineCamping");
                });

            modelBuilder.Entity("Domain.Relatives", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("Domain.Vaccine", b =>
                {
                    b.Navigation("VaccineTranasaction");
                });

            modelBuilder.Entity("Domain.VaccineCamping", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
